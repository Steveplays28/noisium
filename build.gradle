//file:noinspection GroovyAccessibility
//file:noinspection GroovyAssignabilityCheck

plugins {
    id "architectury-plugin" version "${architectury_plugin_version}"
    id "dev.architectury.loom" version "${architectury_loom_version}" apply false
    id "io.github.pacifistmc.forgix" version "${forgix_plugin_version}"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    version = "${rootProject.mod_version}+mc${rootProject.supported_minecraft_version_name}"
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.

        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }
        maven {
            name = "NeoForged"
            url = "https://maven.neoforged.net/releases/"
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// Forgix settings
// Forgix merges all modloader specific JARs into one JAR
forgix {
    group = "${rootProject.maven_group}_${rootProject.archives_base_name}"
    mergedJarName = "${mod_id}-${version}.jar"
}

// Move the merged JAR into the build/libs/ folder, overwriting any near-empty JARs previously there
// Afterwards, delete the Merged/ folder
tasks.register("moveMergedJar") {
    dependsOn(mergeJars)

    doLast {
        delete "build/"
        mkdir "build/libs/"
        copy {
            from "Merged/${forgix.mergedJarName}"
            into "build/libs/"
        }
        delete "Merged/"
    }
}

// Register a task that runs Forgix' mergeJars task and then the moveMergedJar task after all subprojects have been built
tasks.register("mergeJarsAndMoveJar") {
    dependsOn(subprojects.build)
    finalizedBy(mergeJars, moveMergedJar)
}

// Run the clean task before building, to make sure Forgix doesn't use any JARs it shouldn't use
// Run the mergeJarsAndMoveJar task after all subprojects have been built
tasks.named("build") {
    dependsOn(clean)
    finalizedBy(mergeJarsAndMoveJar)
}

tasks.named("assemble") {
    dependsOn(clean)
    finalizedBy(mergeJarsAndMoveJar)
}
