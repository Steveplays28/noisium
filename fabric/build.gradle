//file:noinspection GroovyAccessibility
//file:noinspection GroovyAssignabilityCheck

plugins {
    id "com.github.johnrengelman.shadow" version "${shadow_plugin_version}"
}

def archivesNameFabric = "${rootProject.archives_base_name}-fabric"

architectury {
    platformSetupLoomIde()
    fabric()
}

base {
    archivesName = archivesNameFabric
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    // Mixin Extras
    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${project.mixin_extras_version}")))

    // Architectury API
    modRuntimeOnly("dev.architectury:architectury-fabric:${rootProject.architectury_api_version}") { exclude group: 'net.fabricmc', module: 'fabric-loader' }

    // Fabric API
    modRuntimeOnly "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    // Mod Menu
    modRuntimeOnly "maven.modrinth:modmenu:${rootProject.mod_menu_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "mod_id": rootProject.mod_id,
                "mod_namespace": rootProject.mod_namespace,
                "mod_name": rootProject.mod_name,
                "mod_description": rootProject.mod_description,
                "mod_license": rootProject.mod_license,
                "curseforge_project_id": rootProject.curseforge_project_id,
                "modrinth_project_id": rootProject.modrinth_project_id,
                "fabric_loader_version": rootProject.fabric_loader_version,
                "supported_minecraft_version": rootProject.supported_minecraft_version,
                "architectury_api_version": rootProject.architectury_api_version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = rootProject.maven_group
            artifactId = archivesNameFabric
            from components.java
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Steveplays28/${rootProject.mod_id}")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
